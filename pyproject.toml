[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
authors = [
    { name = "Justin Flannery", email = "juftin@juftin.com" }
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy"
]
dependencies = [
    "slack_bolt>=1.18.0,<2", # Slack Bolt
    "fastapi~=0.103.2", # API framework
    "aiohttp~=3.8.6", # async http client
    "uvicorn[standard]~=0.23.2", # asgi server
    "gunicorn~=21.2.0",  # wsgi server
    "pydantic~=2.4.2", # data validation
    "openai~=0.28.1", # openai api
    "slack-sdk>=3.23.0,<4", # slack sdk
    "tiktoken>=0.5.1,<0.6", # token management
    "urllib3<2", # https://github.com/Yelp/elastalert/issues/2306
]
description = "ChatGPT + OpenAI as a Slack Bot"
dynamic = ["version"]
license = "MIT"
name = "chatgpt-in-slack"
readme = "README.md"
requires-python = ">=3.8"

[project.scripts]
chatgpt-in-slack = "app.app:main"

[project.urls]
Documentation = "https://juftin.github.io/ChatGPT-in-Slack"
Issues = "https://juftin.github.io/ChatGPT-in-Slack/issues"
Source = "https://github.com/juftin/ChatGPT-in-Slack"

[tool.black]
line-length = 88
skip-string-normalization = true
target-version = ["py38"]

[tool.coverage.paths]
slack_gpt_bot = ["app", "*/ChatGPT-in-Slack/app"]
tests = ["tests", "*/ChatGPT-in-Slack/tests"]

[tool.coverage.report]
exclude_lines = [
    "no cov",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]

[tool.coverage.run]
branch = true
omit = [
    "app/__about__.py"
]
parallel = true
source_pkgs = ["app", "tests"]

[tool.hatch.build.targets.wheel]
packages = ["app"]

[[tool.hatch.envs.all.matrix]]
python = ["3.8", "3.9", "3.10", "3.11", "3.12"]

[tool.hatch.envs.default]
dependencies = [
    "coverage[toml]>=6.5",
    "pytest"
]
path = ".venv"
python = "3.11"
type = "virtual"

[tool.hatch.envs.default.scripts]
cov = [
    "test-cov",
    "cov-report"
]
cov-report = [
    "- coverage combine",
    "coverage report -m"
]
test = "pytest {args:tests}"
test-cov = "coverage run -m pytest {args:tests}"

[tool.hatch.envs.lint]
dependencies = [
    "black>=23.1.0",
    "mypy>=1.0.0",
    "ruff>=0.0.243"
]
detached = true

[tool.hatch.envs.lint.scripts]
all = [
    "style",
    "typing"
]
fmt = [
    "black {args:.}",
    "ruff --fix {args:.}",
    "style"
]
style = [
    "ruff {args:.}",
    "black --check --diff {args:.}"
]
typing = "mypy --install-types --non-interactive {args:app tests}"

[tool.hatch.version]
path = "app/__about__.py"

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
    "pytest.*",
    "slack_bolt.*",
    "openai.*",
    "tiktoken.*",
    "slack_sdk.*",
]

[tool.ruff]
ignore = [
    # Allow non-abstract empty methods in abstract base classes
    "B027",
    # Boolean-typed positional argument in function definition
    "FBT001",
    # Allow boolean positional values in function calls, like `dict.get(... True)`
    "FBT003",
    # Ignore checks for possible passwords
    "S105",
    "S106",
    "S107",
    # Ignore complexity
    "C901",
    "PLR0911",
    "PLR0912",
    "PLR0913",
    "PLR0915"
]
line-length = 125
select = [
    "A",
    "ARG",
    "B",
    "C",
    "DTZ",
    "E",
    "EM",
    "F",
    "FBT",
    "I",
    "ICN",
    "ISC",
    "N",
    "PLC",
    "PLE",
    "PLR",
    "PLW",
    "Q",
    "RUF",
    "S",
    "T",
    "TID",
    "UP",
    "W",
    "YTT"
]
target-version = "py38"
unfixable = [
    # Don't touch unused imports
    "F401"
]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.isort]
known-first-party = ["app"]

[tool.ruff.per-file-ignores]
# Tests can use magic values, assertions, and relative imports
"tests/**/*" = ["PLR2004", "S101", "TID252"]
